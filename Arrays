Array is a Linear d.s which stores similar type of data
1.Largest ele in array
Brute
Sort array and return arr[n-1] -> O log n
Better -> O(n)
  int max=arr[0];
        for(int i=0;i<n;i++){
            if(arr[i]>max){
                max=arr[i];
            }

        }
    return max; 
Link : https://www.naukri.com/code360/problems/largest-element-in-the-array-largest-element-in-the-array_5026279?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems&leftPanelTabValue=SUBMISSION

2. Second largest element
Brute
1.Sort array
2.iteraate loop from n-2 since n-1 is largest
3.if arr[i]!=largest, then SecLargest is arr[i] and then break
for(int i=n-2;i>=0;i--){
  if(arr[i]!=largest){
    SecLargest=arr[i];
    break;
    }
}
Optimal: O(n)
 private static int SecondMax(int n, int[] arr) {
        int Max=arr[0];
        int Smax=-1;

        for(int i=0;i<n;i++){
            if(arr[i]>Max){
                Smax=Max;
                Max=arr[i];
            }
        else if(arr[i]<Max && arr[i]>Smax){
            Smax=arr[i];
            }
        }
        return Smax;
    }

3.Second smallest element in array
private static int SecondMin(int n, int[] arr) {
        int Min=arr[0];
        int Smin=Integer.MIN_VALUE;

        for(int i=0;i<n;i++){
            if(arr[i]<Min){
                Smin=Min;
                Min=arr[i];
            }
        else if(arr[i]!=Min && arr[i]<Smin){
            Smin=arr[i];
            }
        }
        return Smin;
    }
}

Link : https://www.naukri.com/code360/problems/ninja-and-the-second-order-elements_6581960?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems
4. Check array is Sorted
 for(int i=1;i<n;i++){
            if(a[i]>=a[i-1]){
            }
            else{
                return 0;
            }
        }
    return 1;

Link : https://www.naukri.com/code360/problems/ninja-and-the-sorted-check_6581957?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems


5. Remove duplicates
Brute force
Use set -> N log n + N for inserting into set...s.c -> o(n)
public static int removeDupl(int arr[],int n){
Set<Integer>s=new HashSet<>():
for(int i=0;i<n;i++){
s.add(arr[i]);
}

Optimal using two pinter approach, O(n),O(1)
1.initialize i=0;
2.iterate loop from j=1 till end
3.if(arrj)!=arr[i]{
give it front position, arr(i+1)=arr[j];
then increase i++;
code:
int i=0;
        for(int j=1;j<n;j++){
            if(arr[j]!=arr[i]){
                arr[i+1]=arr[j];
                i++;
            }
        }
        return i+1;

Link : https://www.naukri.com/code360/problems/remove-duplicates-from-sorted-array_1102307?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems&leftPanelTabValue=SUBMISSION

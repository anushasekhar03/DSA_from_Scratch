Array is a Linear d.s which stores similar type of data
1.Largest ele in array
Brute
Sort array and return arr[n-1] -> O log n
Better -> O(n)
  int max=arr[0];
        for(int i=0;i<n;i++){
            if(arr[i]>max){
                max=arr[i];
            }

        }
    return max; 
Link : https://www.naukri.com/code360/problems/largest-element-in-the-array-largest-element-in-the-array_5026279?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems&leftPanelTabValue=SUBMISSION

2. Second largest element
Brute
1.Sort array
2.iteraate loop from n-2 since n-1 is largest
3.if arr[i]!=largest, then SecLargest is arr[i] and then break
for(int i=n-2;i>=0;i--){
  if(arr[i]!=largest){
    SecLargest=arr[i];
    break;
    }
}
Optimal: O(n)
 private static int SecondMax(int n, int[] arr) {
        int Max=arr[0];
        int Smax=-1;

        for(int i=0;i<n;i++){
            if(arr[i]>Max){
                Smax=Max;
                Max=arr[i];
            }
        else if(arr[i]<Max && arr[i]>Smax){
            Smax=arr[i];
            }
        }
        return Smax;
    }

3.Second smallest element in array
private static int SecondMin(int n, int[] arr) {
        int Min=arr[0];
        int Smin=Integer.MIN_VALUE;

        for(int i=0;i<n;i++){
            if(arr[i]<Min){
                Smin=Min;
                Min=arr[i];
            }
        else if(arr[i]!=Min && arr[i]<Smin){
            Smin=arr[i];
            }
        }
        return Smin;
    }
}

Link : https://www.naukri.com/code360/problems/ninja-and-the-second-order-elements_6581960?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems
4. Check array is Sorted
 for(int i=1;i<n;i++){
            if(a[i]>=a[i-1]){
            }
            else{
                return 0;
            }
        }
    return 1;

Link : https://www.naukri.com/code360/problems/ninja-and-the-sorted-check_6581957?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems


5. Remove duplicates
Brute force
Use set -> N log n + N for inserting into set...s.c -> o(n)
public static int removeDupl(int arr[],int n){
Set<Integer>s=new HashSet<>():
for(int i=0;i<n;i++){
s.add(arr[i]);
}

Optimal using two pinter approach, O(n),O(1)
1.initialize i=0;
2.iterate loop from j=1 till end
3.if(arrj)!=arr[i]{
give it front position, arr(i+1)=arr[j];
then increase i++;
code:
int i=0;
        for(int j=1;j<n;j++){
            if(arr[j]!=arr[i]){
                arr[i+1]=arr[j];
                i++;
            }
        }
        return i+1;

Link : https://www.naukri.com/code360/problems/remove-duplicates-from-sorted-array_1102307?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems&leftPanelTabValue=SUBMISSION

Basic to advanced questions:
Find the maximum element in an array.
    Technique: Iteration through the array.

Find the minimum element in an array.
    Technique: Iteration through the array.

Calculate the sum of all elements in an array.
    Technique: Iteration through the array.

Reverse an array.
Technique: Two-pointer approach or iterative swapping.

Check if an array is sorted.
    Technique: Iteration through the array.

Remove duplicates from a sorted array.
    Technique: Two-pointer approach.

Rotate an array to the right by k steps.
    Technique: Basic array manipulation.

Implement an algorithm to find the "Kth" largest element in an array.
    Technique: Sorting or use of max heap.

Implement an algorithm to find the "Kth" smallest element in an array.
    Technique: Sorting or use of min heap.

Move all zeroes to the end of the array.
    Technique: Two-pointer approach.
7. Left rotate an array by 1 place
1.store arr[0] in temp
iterate loop from i=1, put arr[i-1]=arr[i] elements, and at lastput arr[n-1]=temp;
code:  static int[] rotateArray(int[] arr, int n) {
       int temp=arr[0];
       for(int i=1;i<n;i++){
           arr[i-1]=arr[i];
       }
       arr[n-1]=temp;
    return arr;
    }

Link : https://www.naukri.com/code360/problems/left-rotate-an-array-by-one_5026278?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems&leftPanelTabValue=SUBMISSION

8.left rotate an by k places
optimal
1.reverse by d elements
2,rev d+1 elemts to n
3.reverse complte n to 0th index
reverse(arr, 0, k - 1);
reverse(arr, k, n - 1);
reverse(arr, 0, n - 1);

Link : https://www.naukri.com/code360/problems/rotate-array_1230543?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems&leftPanelTabValue=SUBMISSION

9.move zeroes to end
OPtimal- O(n),O(1)
1.initialize j=-1;
iteraate loop from 0 to n, if(arr[i]!=0 tyen j=i, break. Now j=i;
2.if(j!=-1){
iteraate loopfrom i=j+1, if(arr[i]!=0{
swap(arr[i],arr[j]), j++;

Link : https://www.naukri.com/code360/problems/ninja-and-the-zero-s_6581958?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems&leftPanelTabValue=PROBLEM


